---
title: "Why care about code style?"
format: html
---

Everyone has a coding style, whether or not they consciously consider it. So if we already have a style without working for it, why should we bother to read and adopt anything but our intuitive, natural code style?

## Technical debt
Some of us will recall discussing a [series of papers in the R Journal](https://journal.r-project.org/issues/2021-2/) about the need for software engineering best practices in R programming. [The lead paper in the series](https://journal.r-project.org/articles/RJ-2021-108/) cited technical debt as the cost of eschewing best practices in R code, and defined technical debt like this:

> Code quality is often related to technical debt. Technical Debt (TD) is a metaphor used to reflect the implied cost of additional rework caused by choosing an easy solution in the present, instead of using a better approach that would take longer (Samarthyam et al., 2017).

Two things to note: first, technical debt matters because it imposes future costs that could have been avoided in the first place. While you are hacking away in R, you will often write code that isn't for reuse and in those cases you may follow whatever patterns you like. However, it isn't uncommon when working like this that you will hit upon a solution that you want to save in a script for later, and then you will need to re-write your clever solution in proper R style. Second, code style is only a part of code quality. Knowing how to make your code work is always the most important consideration. Unfortunately (unlike code style), there isn't a way to download that knowledge as an R package.
