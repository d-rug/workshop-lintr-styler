[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R code style with the lintr and styler packages",
    "section": "",
    "text": "Overview\nYOUR DESCRIPTION, LEARNING GOALS, PREREQUISITES, ETC"
  },
  {
    "objectID": "01_intro.html#r-style-guides",
    "href": "01_intro.html#r-style-guides",
    "title": "Introduction",
    "section": "R style guides",
    "text": "R style guides\nThere are numerous R style guides, but only two are widely used: the tidyverse style guide, and the Google R style guide. In fact, the Google style guide is just the tidyverse guide with a few small adjustments. You don’t have to adopt either style completely - you don’t have to do anything - but I recommend adopting tidyverse style except in cases where you have a specific reason not to (e.g., I like to use = for assignment because it is more intuitive for folks coming from Python or most other programming languages)."
  },
  {
    "objectID": "02_why-style-matters.html#technical-debt",
    "href": "02_why-style-matters.html#technical-debt",
    "title": "Why care about code style?",
    "section": "Technical debt",
    "text": "Technical debt\nSome of us will recall discussing a series of papers in the R Journal about the need for software engineering best practices in R programming. The lead paper in the series cited technical debt as the cost of eschewing best practices in R code, and defined technical debt like this:\n\nCode quality is often related to technical debt. Technical Debt (TD) is a metaphor used to reflect the implied cost of additional rework caused by choosing an easy solution in the present, instead of using a better approach that would take longer (Samarthyam et al., 2017).\n\nTwo things to note: first, technical debt matters because it imposes future costs that could have been avoided in the first place. While you are hacking away in R, you will often write code that isn’t for reuse and in those cases you may follow whatever patterns you like. However, it isn’t uncommon when working like this that you will hit upon a solution that you want to save in a script for later, and then you will need to re-write your clever solution in proper R style. Second, code style is only a part of code quality. Knowing how to make your code work is always the most important consideration. Unfortunately (unlike code style), there isn’t a way to download that knowledge as an R package."
  },
  {
    "objectID": "03_lintr.html#the-lintr-package",
    "href": "03_lintr.html#the-lintr-package",
    "title": "Linting With lintr",
    "section": "The lintr package",
    "text": "The lintr package\nLinting can be automated (to a point), and the lintr package fulfills that promise for R scripts. My recommendation is to use lintr through its RStudio integration. Once the package is installed, you only need to find the “Lint current file” option from the “Addins” menu to get a list of all the code lint in your script.\n\n\n\nFigure 4.1: Using RStudio lintr integration"
  },
  {
    "objectID": "03_lintr.html#examples",
    "href": "03_lintr.html#examples",
    "title": "Linting With lintr",
    "section": "Examples",
    "text": "Examples\nNow lets look at a few examples of linting R scripts. I’ll write a short script with a few style errors to show what lintr says about them.\n\n# \nitems = c( \"apple\", \"pear\", \"candy\" )\nsapply( items, nchar )\n# lapply( items, nchar )\n\ntotalChars = 0\nfor (i in 1:length(items)) { totalChars = totalchars + nchar(items[[i]]); print(nchar(items[[i]]))}"
  },
  {
    "objectID": "03_lintr.html#limitations",
    "href": "03_lintr.html#limitations",
    "title": "Linting With lintr",
    "section": "Limitations",
    "text": "Limitations\nThere is no magic to how lintr works - it recognizes pre-defined patterns in the code and tells you about them. This leaves out the elements of code style that can’t be written into an obvious pattern. For instance, lintr will tell you that you’ve used comments to remove unused code (a pattern commonly used to test alternatives while coding but which hurts maintainability because later you may forget whether the version in the code or in the comments works better.) But lintr won’t tell you when your comments are ambiguous, contradict the code, or are unhelpful."
  },
  {
    "objectID": "03_lintr.html#defaults-and-customization",
    "href": "03_lintr.html#defaults-and-customization",
    "title": "Linting With lintr",
    "section": "Defaults and customization",
    "text": "Defaults and customization\nBy default, lintr tests for the elements of the tidyverse style guide. However, you may customize its operation, generally in either of two ways:\n\nYou may select from an extensive list of pre-defined linters (View( available_linters())), or\nYou may define your own linters (advanced)\n\nBoth of these are beyond the scope of today’s mini-workshop. I recommend beginning with the defaults and the RStudio integration."
  },
  {
    "objectID": "04_styler.html#examples",
    "href": "04_styler.html#examples",
    "title": "Clean up lint with styler",
    "section": "Examples",
    "text": "Examples\nNow lets look at how styler handles our crappy R script from the lintr example.\n\n# \nitems = c( \"apple\", \"pear\", \"candy\" )\nsapply( items, nchar )\n# lapply( items, nchar )\n\ntotalChars = 0\nfor (i in 1:length(items)) { totalChars = totalchars + nchar(items[[i]]); print(nchar(items[[i]]))}\n\nbecomes\n\n#\nitems <- c(\"apple\", \"pear\", \"candy\")\nsapply(items, nchar)\n# lapply( items, nchar )\n\ntotalChars <- 0\nfor (i in 1:length(items)) {\n  totalChars <- totalchars + nchar(items[[i]])\n  print(nchar(items[[i]]))\n}\n\nyou can see that styler has not fixed all of the code lint: the lapply() call is still commented out, 1:length(items) has not been changed to seq_along(items), and object names weren’t changed. You can change default settings but for starters I recommend running lintr again after styler to see what lint remains."
  },
  {
    "objectID": "04_styler.html#conclusion",
    "href": "04_styler.html#conclusion",
    "title": "Clean up lint with styler",
    "section": "Conclusion",
    "text": "Conclusion\nLike lintr, styler can’t make your code work. It can, however, make it more readable and therefore maintainable. The extremely convenient RStudio integrations mean that there’s really no reason to not use these packages."
  }
]