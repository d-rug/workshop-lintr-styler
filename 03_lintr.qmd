---
title: Linting With `lintr`
---

Now we'll look at the first of our packages for controlling code style: [`lintr`](https://lintr.r-lib.org). Code lint is a name for small flaws that spoil the overall style of a script. "Linting" is the term for seeking out and identifying code lint in your scripts.

## The `lintr` package
Linting can be automated (to a point), and the `lintr` package fulfills that promise for R scripts. My recommendation is to use `lintr` through its RStudio integration. Once the package is installed, you only need to find the "Lint current file" option from the "Addins" menu to get a list of all the code lint in your script.

![Using RStudio `lintr` integration](img/ex-lintr.png){#fig-litr fig-alt="screenshot showing where to find the lintr interation in RStudio"}

## Examples
Now lets look at a few examples of linting R scripts. I'll write a short script with a few style errors to show what `lintr` says about them.

```{r}
#| eval: false
# 
items = c( "apple", "pear", "candy" )
sapply( items, nchar )
# lapply( items, nchar )

totalChars = 0
for (i in 1:length(items)) { totalChars = totalchars + nchar(items[[i]]); print(nchar(items[[i]]))}
```

## Limitations
There is no magic to how `lintr` works - it recognizes pre-defined patterns in the code and tells you about them. This leaves out the elements of code style that can't be written into an obvious pattern. For instance, `lintr` will tell you that you've used comments to remove unused code (a pattern commonly used to test alternatives while coding but which hurts maintainability because later you may forget whether the version in the code or in the comments works better.) But `lintr` won't tell you when your comments are ambiguous, contradict the code, or are unhelpful. 

## Defaults and customization 
By default, `lintr` tests for the elements of [the `tidyverse` style guide](https://style.tidyverse.org/). However, you may customize its operation, generally in either of two ways: 
 
  1. You may select from an extensive list of pre-defined linters (`View( available_linters())`), or
  2. You may [define your own linters](https://lintr.r-lib.org/articles/creating_linters.html) (advanced)
  
Both of these are beyond the scope of today's mini-workshop. I recommend beginning with the defaults and the RStudio integration.
